{"version":3,"file":"multiSamlStrategy.js","sourceRoot":"","sources":["../../src/passport-saml/multiSamlStrategy.ts"],"names":[],"mappings":"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","sourcesContent":["import * as util from \"util\";\nimport * as saml from \"./saml\";\nimport { CacheProvider as InMemoryCacheProvider } from \"./inmemory-cache-provider\";\nimport SamlStrategy = require(\"./strategy\");\nimport type { Request } from \"express\";\nimport {\n  AuthenticateOptions,\n  AuthorizeOptions,\n  MultiSamlConfig,\n  RequestWithUser,\n  VerifyWithoutRequest,\n  VerifyWithRequest,\n} from \"./types\";\n\nclass MultiSamlStrategy extends SamlStrategy {\n  _options: MultiSamlConfig;\n\n  constructor(options: MultiSamlConfig, verify: VerifyWithRequest);\n  constructor(options: MultiSamlConfig, verify: VerifyWithoutRequest);\n  constructor(options: MultiSamlConfig, verify: never) {\n    if (!options || typeof options.getSamlOptions != \"function\") {\n      throw new Error(\"Please provide a getSamlOptions function\");\n    }\n\n    if (!options.requestIdExpirationPeriodMs) {\n      options.requestIdExpirationPeriodMs = 28800000; // 8 hours\n    }\n\n    if (!options.cacheProvider) {\n      options.cacheProvider = new InMemoryCacheProvider({\n        keyExpirationPeriodMs: options.requestIdExpirationPeriodMs,\n      });\n    }\n\n    super(options, verify);\n    this._options = options;\n  }\n\n  authenticate(req: RequestWithUser, options: AuthenticateOptions) {\n    this._options.getSamlOptions(req, (err, samlOptions) => {\n      if (err) {\n        return this.error(err);\n      }\n\n      const samlService = new saml.SAML({ ...this._options, ...samlOptions });\n      const strategy = Object.assign({}, this, { _saml: samlService });\n      Object.setPrototypeOf(strategy, this);\n      super.authenticate.call(strategy, req, options);\n    });\n  }\n\n  logout(\n    req: RequestWithUser,\n    callback: (err: Error | null, url?: string | null | undefined) => void\n  ) {\n    this._options.getSamlOptions(req, (err, samlOptions) => {\n      if (err) {\n        return callback(err);\n      }\n\n      const samlService = new saml.SAML(Object.assign({}, this._options, samlOptions));\n      const strategy = Object.assign({}, this, { _saml: samlService });\n      Object.setPrototypeOf(strategy, this);\n      super.logout.call(strategy, req, callback);\n    });\n  }\n\n  /** @ts-expect-error typescript disallows changing method signature in a subclass */\n  generateServiceProviderMetadata(\n    req: Request,\n    decryptionCert: string | null,\n    signingCert: string | null,\n    callback: (err: Error | null, metadata?: string) => void\n  ) {\n    if (typeof callback !== \"function\") {\n      throw new Error(\"Metadata can't be provided synchronously for MultiSamlStrategy.\");\n    }\n\n    return this._options.getSamlOptions(req, (err, samlOptions) => {\n      if (err) {\n        return callback(err);\n      }\n\n      const samlService = new saml.SAML(Object.assign({}, this._options, samlOptions));\n      const strategy = Object.assign({}, this, { _saml: samlService });\n      Object.setPrototypeOf(strategy, this);\n      return callback(\n        null,\n        super.generateServiceProviderMetadata.call(strategy, decryptionCert, signingCert)\n      );\n    });\n  }\n}\n\nexport = MultiSamlStrategy;\n"]}