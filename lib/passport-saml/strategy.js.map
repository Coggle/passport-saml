{"version":3,"file":"strategy.js","sourceRoot":"","sources":["../../src/passport-saml/strategy.ts"],"names":[],"mappings":";AAAA,yDAAiE;AACjE,+BAA+B;AAC/B,2BAA2B;AAW3B,MAAM,QAAS,SAAQ,4BAAgB;IAQrC,YAAY,OAAmB,EAAE,MAAa;QAC5C,KAAK,EAAE,CAAC;QACR,IAAI,OAAO,OAAO,IAAI,UAAU,EAAE;YAChC,MAAM,GAAG,OAAO,CAAC;YACjB,OAAO,GAAG,EAAE,CAAC;SACd;QAED,IAAI,CAAC,MAAM,EAAE;YACX,MAAM,IAAI,KAAK,CAAC,yDAAyD,CAAC,CAAC;SAC5E;QAED,+FAA+F;QAC/F,uEAAuE;QACvE,IAAI,OAAO,CAAC,IAAI,EAAE;YAChB,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;SAC1B;aAAM;YACL,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC;SACpB;QAED,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,IAAI,CAAC,KAAK,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACpC,IAAI,CAAC,kBAAkB,GAAG,CAAC,CAAC,OAAO,CAAC,iBAAiB,CAAC;IACxD,CAAC;IAED,YAAY,CAAC,GAAoB,EAAE,OAA4B;QAC7D,OAAO,CAAC,YAAY,GAAG,OAAO,CAAC,YAAY,IAAI,eAAe,CAAC;QAC/D,MAAM,gBAAgB,GAAG,CAAC,EACxB,OAAO,EACP,SAAS,GAIV,EAAE,EAAE;YACH,IAAI,SAAS,EAAE;gBACb,GAAG,CAAC,MAAM,EAAE,CAAC;gBACb,IAAI,OAAO,EAAE;oBACX,GAAG,CAAC,iBAAiB,GAAG,OAAO,CAAC;oBAChC,OAAO,IAAI,CAAC,KAAK,CAAC,oBAAoB,CAAC,GAAG,EAAE,OAAO,EAAE,iBAAiB,CAAC,CAAC;iBACzE;gBACD,OAAO,IAAI,CAAC,IAAI,EAAE,CAAC;aACpB;YAED,MAAM,QAAQ,GAAG,CACf,GAAiB,EACjB,IAA8B,EAC9B,IAA8B,EAC9B,EAAE;gBACF,IAAI,GAAG,EAAE;oBACP,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;iBACxB;gBAED,IAAI,CAAC,IAAI,EAAE;oBACT,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;iBAC7B;gBAED,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;YAC3B,CAAC,CAAC;YAEF,IAAI,IAAI,CAAC,kBAAkB,EAAE;gBAC1B,IAAI,CAAC,OAA6B,CAAC,GAAG,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;aAC7D;iBAAM;gBACJ,IAAI,CAAC,OAAgC,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;aAC3D;QACH,CAAC,CAAC;QAEF,MAAM,iBAAiB,GAAG,CAAC,GAAiB,EAAE,GAAmB,EAAE,EAAE;YACnE,IAAI,GAAG,EAAE;gBACP,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;aACjB;iBAAM;gBACL,IAAI,CAAC,QAAQ,CAAC,GAAI,CAAC,CAAC;aACrB;QACH,CAAC,CAAC;QAEF,IAAI,GAAG,CAAC,KAAK,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,YAAY,IAAI,GAAG,CAAC,KAAK,CAAC,WAAW,CAAC,EAAE;YAClE,MAAM,aAAa,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC;YAC/C,IAAI,CAAC,KAAK;iBACP,qBAAqB,CAAC,GAAG,CAAC,KAAK,EAAE,aAAa,CAAC;iBAC/C,IAAI,CAAC,gBAAgB,CAAC;iBACtB,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;SACpC;aAAM,IAAI,GAAG,CAAC,IAAI,IAAI,GAAG,CAAC,IAAI,CAAC,YAAY,EAAE;YAC5C,IAAI,CAAC,KAAK;iBACP,yBAAyB,CAAC,GAAG,CAAC,IAAI,CAAC;iBACnC,IAAI,CAAC,gBAAgB,CAAC;iBACtB,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;SACpC;aAAM,IAAI,GAAG,CAAC,IAAI,IAAI,GAAG,CAAC,IAAI,CAAC,WAAW,EAAE;YAC3C,IAAI,CAAC,KAAK;iBACP,wBAAwB,CAAC,GAAG,CAAC,IAAI,CAAC;iBAClC,IAAI,CAAC,gBAAgB,CAAC;iBACtB,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;SACpC;aAAM;YACL,MAAM,cAAc,GAAG;gBACrB,eAAe,EAAE,KAAK,IAAI,EAAE;oBAC1B,IAAI;wBACF,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,mBAAmB,KAAK,WAAW,EAAE;4BAC1D,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,qBAAqB,CAAC,GAAG,CAAC,CAAC;4BACzD,MAAM,GAAG,GAAG,GAAG,CAAC,GAAI,CAAC;4BACrB,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;yBAChB;6BAAM;4BACL,4BAA4B;4BAC5B,IAAI,CAAC,QAAQ,CAAC,MAAM,IAAI,CAAC,KAAK,CAAC,oBAAoB,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC,CAAC;yBACpE;qBACF;oBAAC,OAAO,GAAG,EAAE;wBACZ,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;qBACjB;gBACH,CAAC;gBACD,gBAAgB,EAAE,KAAK,IAAI,EAAE;oBAC3B,IAAI;wBACF,IAAI,CAAC,QAAQ,CAAC,MAAM,IAAI,CAAC,KAAK,CAAC,iBAAiB,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC,CAAC;qBACjE;oBAAC,OAAO,GAAG,EAAE;wBACZ,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;qBACjB;gBACH,CAAC;aACF,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;YAExB,IAAI,OAAO,cAAc,KAAK,UAAU,EAAE;gBACxC,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;aACvB;YAED,cAAc,EAAE,CAAC;SAClB;IACH,CAAC;IAED,MAAM,CAAC,GAAoB,EAAE,QAA0D;QACrF,IAAI,CAAC,KAAK;aACP,iBAAiB,CAAC,GAAG,EAAE,EAAE,CAAC;aAC1B,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,QAAQ,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;aAClC,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC;IACnC,CAAC;IAED,+BAA+B,CAC7B,cAA6B,EAC7B,WAA2B;QAE3B,OAAO,IAAI,CAAC,KAAK,CAAC,+BAA+B,CAAC,cAAc,EAAE,WAAW,CAAC,CAAC;IACjF,CAAC;CACF;AAED,iBAAS,QAAQ,CAAC","sourcesContent":["import { Strategy as PassportStrategy } from \"passport-strategy\";\nimport * as saml from \"./saml\";\nimport * as url from \"url\";\nimport {\n  AuthenticateOptions,\n  AuthorizeOptions,\n  RequestWithUser,\n  SamlConfig,\n  VerifyWithoutRequest,\n  VerifyWithRequest,\n} from \"./types\";\nimport { Profile } from \"./types\";\n\nclass Strategy extends PassportStrategy {\n  name: string;\n  _verify: VerifyWithRequest | VerifyWithoutRequest;\n  _saml: saml.SAML;\n  _passReqToCallback?: boolean;\n\n  constructor(options: SamlConfig, verify: VerifyWithRequest);\n  constructor(options: SamlConfig, verify: VerifyWithoutRequest);\n  constructor(options: SamlConfig, verify: never) {\n    super();\n    if (typeof options == \"function\") {\n      verify = options;\n      options = {};\n    }\n\n    if (!verify) {\n      throw new Error(\"SAML authentication strategy requires a verify function\");\n    }\n\n    // Customizing the name can be useful to support multiple SAML configurations at the same time.\n    // Unlike other options, this one gets deleted instead of passed along.\n    if (options.name) {\n      this.name = options.name;\n    } else {\n      this.name = \"saml\";\n    }\n\n    this._verify = verify;\n    this._saml = new saml.SAML(options);\n    this._passReqToCallback = !!options.passReqToCallback;\n  }\n\n  authenticate(req: RequestWithUser, options: AuthenticateOptions): void {\n    options.samlFallback = options.samlFallback || \"login-request\";\n    const validateCallback = ({\n      profile,\n      loggedOut,\n    }: {\n      profile?: Profile | null;\n      loggedOut?: boolean;\n    }) => {\n      if (loggedOut) {\n        req.logout();\n        if (profile) {\n          req.samlLogoutRequest = profile;\n          return this._saml.getLogoutResponseUrl(req, options, redirectIfSuccess);\n        }\n        return this.pass();\n      }\n\n      const verified = (\n        err: Error | null,\n        user?: Record<string, unknown>,\n        info?: Record<string, unknown>\n      ) => {\n        if (err) {\n          return this.error(err);\n        }\n\n        if (!user) {\n          return this.fail(info, 401);\n        }\n\n        this.success(user, info);\n      };\n\n      if (this._passReqToCallback) {\n        (this._verify as VerifyWithRequest)(req, profile, verified);\n      } else {\n        (this._verify as VerifyWithoutRequest)(profile, verified);\n      }\n    };\n\n    const redirectIfSuccess = (err: Error | null, url?: string | null) => {\n      if (err) {\n        this.error(err);\n      } else {\n        this.redirect(url!);\n      }\n    };\n\n    if (req.query && (req.query.SAMLResponse || req.query.SAMLRequest)) {\n      const originalQuery = url.parse(req.url).query;\n      this._saml\n        .validateRedirectAsync(req.query, originalQuery)\n        .then(validateCallback)\n        .catch((err) => this.error(err));\n    } else if (req.body && req.body.SAMLResponse) {\n      this._saml\n        .validatePostResponseAsync(req.body)\n        .then(validateCallback)\n        .catch((err) => this.error(err));\n    } else if (req.body && req.body.SAMLRequest) {\n      this._saml\n        .validatePostRequestAsync(req.body)\n        .then(validateCallback)\n        .catch((err) => this.error(err));\n    } else {\n      const requestHandler = {\n        \"login-request\": async () => {\n          try {\n            if (this._saml.options.authnRequestBinding === \"HTTP-POST\") {\n              const data = await this._saml.getAuthorizeFormAsync(req);\n              const res = req.res!;\n              res.send(data);\n            } else {\n              // Defaults to HTTP-Redirect\n              this.redirect(await this._saml.getAuthorizeUrlAsync(req, options));\n            }\n          } catch (err) {\n            this.error(err);\n          }\n        },\n        \"logout-request\": async () => {\n          try {\n            this.redirect(await this._saml.getLogoutUrlAsync(req, options));\n          } catch (err) {\n            this.error(err);\n          }\n        },\n      }[options.samlFallback];\n\n      if (typeof requestHandler !== \"function\") {\n        return this.fail(401);\n      }\n\n      requestHandler();\n    }\n  }\n\n  logout(req: RequestWithUser, callback: (err: Error | null, url?: string | null) => void): void {\n    this._saml\n      .getLogoutUrlAsync(req, {})\n      .then((url) => callback(null, url))\n      .catch((err) => callback(err));\n  }\n\n  generateServiceProviderMetadata(\n    decryptionCert: string | null,\n    signingCert?: string | null\n  ): string {\n    return this._saml.generateServiceProviderMetadata(decryptionCert, signingCert);\n  }\n}\n\nexport = Strategy;\n"]}