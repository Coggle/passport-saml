{"version":3,"file":"saml-post-signing.js","sourceRoot":"","sources":["../../src/passport-saml/saml-post-signing.ts"],"names":[],"mappings":";;;AAAA,2CAAuC;AACvC,2CAA2C;AAG3C,MAAM,iBAAiB,GACrB,8FAA8F,CAAC;AACjG,MAAM,WAAW,GACf,yFAAyF,CAAC;AAC5F,MAAM,iBAAiB,GAAG;IACxB,uDAAuD;IACvD,yCAAyC;CAC1C,CAAC;AAEF,SAAgB,YAAY,CAAC,WAAmB,EAAE,KAAa,EAAE,OAA2B;IAC1F,IAAI,CAAC,WAAW;QAAE,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7D,IAAI,CAAC,KAAK;QAAE,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;IACjD,IAAI,CAAC,OAAO,EAAE;QACZ,OAAO,GAAG,EAAwB,CAAC;KACpC;IAED,IAAI,OAAO,CAAC,WAAW,EAAE;QACvB,OAAO,CAAC,IAAI,CAAC,0EAA0E,CAAC,CAAC;QAEzF,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE;YACvB,OAAO,CAAC,UAAU,GAAG,OAAO,CAAC,WAAW,CAAC;SAC1C;KACF;IAED,IAAI,CAAC,OAAO,CAAC,UAAU;QAAE,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;IAE3E,MAAM,UAAU,GAAG,OAAO,CAAC,sBAAsB,IAAI,iBAAiB,CAAC;IACvE,MAAM,GAAG,GAAG,IAAI,sBAAS,EAAE,CAAC;IAC5B,IAAI,OAAO,CAAC,kBAAkB,EAAE;QAC9B,GAAG,CAAC,kBAAkB,GAAG,UAAU,CAAC,mBAAmB,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAC;KACrF;IACD,GAAG,CAAC,YAAY,CAAC,KAAK,EAAE,UAAU,EAAE,UAAU,CAAC,kBAAkB,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC,CAAC;IAC5F,GAAG,CAAC,UAAU,GAAG,OAAO,CAAC,UAAU,CAAC;IACpC,GAAG,CAAC,gBAAgB,CAAC,WAAW,EAAE;QAChC,QAAQ,EAAE,EAAE,SAAS,EAAE,KAAK,GAAG,WAAW,EAAE,MAAM,EAAE,OAAO,EAAE;KAC9D,CAAC,CAAC;IACH,OAAO,GAAG,CAAC,YAAY,EAAE,CAAC;AAC5B,CAAC;AA5BD,oCA4BC;AAED,SAAgB,oBAAoB,CAAC,YAAoB,EAAE,OAA2B;IACpF,OAAO,YAAY,CAAC,YAAY,EAAE,iBAAiB,EAAE,OAAO,CAAC,CAAC;AAChE,CAAC;AAFD,oDAEC","sourcesContent":["import { SignedXml } from \"xml-crypto\";\nimport * as algorithms from \"./algorithms\";\nimport { SamlOptions, SamlSigningOptions } from \"./types\";\n\nconst authnRequestXPath =\n  '/*[local-name(.)=\"AuthnRequest\" and namespace-uri(.)=\"urn:oasis:names:tc:SAML:2.0:protocol\"]';\nconst issuerXPath =\n  '/*[local-name(.)=\"Issuer\" and namespace-uri(.)=\"urn:oasis:names:tc:SAML:2.0:assertion\"]';\nconst defaultTransforms = [\n  \"http://www.w3.org/2000/09/xmldsig#enveloped-signature\",\n  \"http://www.w3.org/2001/10/xml-exc-c14n#\",\n];\n\nexport function signSamlPost(samlMessage: string, xpath: string, options: SamlSigningOptions) {\n  if (!samlMessage) throw new Error(\"samlMessage is required\");\n  if (!xpath) throw new Error(\"xpath is required\");\n  if (!options) {\n    options = {} as SamlSigningOptions;\n  }\n\n  if (options.privateCert) {\n    console.warn(\"options.privateCert has been deprecated; use options.privateKey instead.\");\n\n    if (!options.privateKey) {\n      options.privateKey = options.privateCert;\n    }\n  }\n\n  if (!options.privateKey) throw new Error(\"options.privateKey is required\");\n\n  const transforms = options.xmlSignatureTransforms || defaultTransforms;\n  const sig = new SignedXml();\n  if (options.signatureAlgorithm) {\n    sig.signatureAlgorithm = algorithms.getSigningAlgorithm(options.signatureAlgorithm);\n  }\n  sig.addReference(xpath, transforms, algorithms.getDigestAlgorithm(options.digestAlgorithm));\n  sig.signingKey = options.privateKey;\n  sig.computeSignature(samlMessage, {\n    location: { reference: xpath + issuerXPath, action: \"after\" },\n  });\n  return sig.getSignedXml();\n}\n\nexport function signAuthnRequestPost(authnRequest: string, options: SamlSigningOptions) {\n  return signSamlPost(authnRequest, authnRequestXPath, options);\n}\n"]}