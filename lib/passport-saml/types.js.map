{"version":3,"file":"types.js","sourceRoot":"","sources":["../../src/passport-saml/types.ts"],"names":[],"mappings":"","sourcesContent":["import type * as express from \"express\";\nimport * as passport from \"passport\";\nimport type { CacheProvider } from \"./inmemory-cache-provider\";\n\nexport type CertCallback = (\n  callback: (err: Error | null, cert?: string | string[]) => void\n) => void;\nexport type RACComparision = \"exact\" | \"minimum\" | \"maximum\" | \"better\";\nexport type SignatureAlgorithm = \"sha1\" | \"sha256\" | \"sha512\";\n\nexport interface AuthenticateOptions extends passport.AuthenticateOptions {\n  samlFallback?: \"login-request\" | \"logout-request\";\n  additionalParams?: Record<string, any>;\n}\n\nexport interface AuthorizeOptions extends AuthenticateOptions {\n  samlFallback?: \"login-request\" | \"logout-request\";\n}\n\nexport interface SamlSigningOptions {\n  /** @deprecated use privateKey field instead */\n  privateCert?: string | Buffer;\n  privateKey: string | Buffer;\n  signatureAlgorithm?: SignatureAlgorithm;\n  xmlSignatureTransforms?: string[];\n  digestAlgorithm?: string;\n}\n\nexport interface SamlOptions extends SamlSigningOptions {\n  // Core\n  callbackUrl: string;\n  path: string;\n  protocol: string;\n  host: string;\n  entryPoint: string;\n  issuer: string;\n  cert: string | string[] | CertCallback;\n  decryptionPvk: string | Buffer;\n\n  // Additional SAML behaviors\n  additionalParams: Record<string, string>;\n  additionalAuthorizeParams: Record<string, string>;\n  identifierFormat: string | null;\n  acceptedClockSkewMs: number;\n  attributeConsumingServiceIndex: string | null;\n  disableRequestedAuthnContext: boolean;\n  authnContext: string | string[];\n  forceAuthn: boolean;\n  skipRequestCompression: boolean;\n  authnRequestBinding?: string;\n  RACComparison: RACComparision;\n  providerName: string;\n  passive: boolean;\n  idpIssuer: string;\n  audience: string;\n  scoping: SamlScopingConfig;\n\n  // InResponseTo Validation\n  validateInResponseTo: boolean;\n  requestIdExpirationPeriodMs: number;\n  cacheProvider: CacheProvider;\n  generateUniqueID: () => string;\n\n  // Logout\n  logoutUrl: string;\n  additionalLogoutParams: Record<string, string>;\n  logoutCallbackUrl: string;\n\n  // extras\n  disableRequestACSUrl: boolean;\n}\n\nexport type SamlConfig = Partial<SamlOptions> & StrategyOptions;\n\ninterface StrategyOptions {\n  name?: string;\n  passReqToCallback?: boolean;\n}\n\nexport interface SamlScopingConfig {\n  idpList?: SamlIDPListConfig[];\n  proxyCount?: number;\n  requesterId?: string[] | string;\n}\n\nexport type XMLValue = string | number | boolean | null | XMLObject | XMLValue[];\n\nexport type XMLObject = {\n  [key: string]: XMLValue;\n};\n\nexport type XMLInput = XMLObject;\n\nexport interface AuthorizeRequestXML {\n  \"samlp:AuthnRequest\": XMLInput;\n}\n\nexport interface LogoutRequestXML {\n  \"samlp:LogoutRequest\": {\n    \"saml:NameID\": XMLInput;\n    [key: string]: XMLValue;\n  };\n}\n\nexport interface ServiceMetadataXML {\n  EntityDescriptor: {\n    [key: string]: XMLValue;\n    SPSSODescriptor: XMLObject;\n  };\n}\n\nexport interface AudienceRestrictionXML {\n  Audience?: XMLObject[];\n}\n\nexport type XMLOutput = Record<string, any>;\n\nexport interface SamlIDPListConfig {\n  entries: SamlIDPEntryConfig[];\n  getComplete?: string;\n}\n\nexport interface SamlIDPEntryConfig {\n  providerId: string;\n  name?: string;\n  loc?: string;\n}\n\nexport interface Profile {\n  issuer?: string;\n  sessionIndex?: string;\n  nameID?: string;\n  nameIDFormat?: string;\n  nameQualifier?: string;\n  spNameQualifier?: string;\n  ID?: string;\n  mail?: string; // InCommon Attribute urn:oid:0.9.2342.19200300.100.1.3\n  email?: string; // `mail` if not present in the assertion\n  [\"urn:oid:0.9.2342.19200300.100.1.3\"]?: string;\n  getAssertionXml?(): string; // get the raw assertion XML\n  getAssertion?(): Record<string, unknown>; // get the assertion XML parsed as a JavaScript object\n  getSamlResponseXml?(): string; // get the raw SAML response XML\n  [attributeName: string]: unknown; // arbitrary `AttributeValue`s\n}\n\nexport interface RequestWithUser extends express.Request {\n  samlLogoutRequest: any;\n  user?: Profile;\n}\n\nexport type VerifiedCallback = (\n  err: Error | null,\n  user?: Record<string, unknown>,\n  info?: Record<string, unknown>\n) => void;\n\nexport type VerifyWithRequest = (\n  req: express.Request,\n  profile: Profile | null | undefined,\n  done: VerifiedCallback\n) => void;\n\nexport type VerifyWithoutRequest = (\n  profile: Profile | null | undefined,\n  done: VerifiedCallback\n) => void;\n\nexport type SamlOptionsCallback = (err: Error | null, samlOptions?: SamlConfig) => void;\n\nexport interface MultiSamlConfig extends SamlConfig {\n  getSamlOptions(req: express.Request, callback: SamlOptionsCallback): void;\n}\n"]}